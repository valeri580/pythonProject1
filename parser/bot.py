from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext
import telebot
from telebot import TeleBot
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup
import logging
import sqlite3

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

TOKEN = "7799920386:AAG9QxkEQYiVZY12wlq7IY1TlKJZ18eGVU4"
bot = telebot.TeleBot(TOKEN)

DB_path = "product.db"

def main_menu():
    keyboard = [
        [InlineKeyboardButton("üå§ –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É", callback_data='weather')],
        [InlineKeyboardButton("üõçÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data='info')]
    ]
    return InlineKeyboardMarkup(keyboard)

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(
        message.chat.id,
        "–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–¥–∞—ë—Ç —Ç–æ–≤–∞—Ä—ã —Å WB!",
        reply_markup=main_menu()
    )


@bot.message_handler(commands=['start'])
def start(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        bot.send_message(
            message.chat.id,
            "–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–¥–∞—ë—Ç —Ç–æ–≤–∞—Ä—ã —Å WB!",
            reply_markup=main_menu()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start: {e}", exc_info=True)


@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏"""
    try:
        if call.data == 'weather':
            bot.answer_callback_query(call.id)
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="–§—É–Ω–∫—Ü–∏—è –ø–æ–≥–æ–¥—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üõ†",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back')]
                ])
            )

        elif call.data == 'info':
            bot.answer_callback_query(call.id)
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="‚ÑπÔ∏è –≠—Ç–æ —É—á–µ–±–Ω—ã–π –±–æ—Ç\n–í–µ—Ä—Å–∏—è 1.0",
                reply_markup=main_menu()
            )

        elif call.data == 'back':
            bot.answer_callback_query(call.id)
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–¥–∞—ë—Ç —Ç–æ–≤–∞—Ä—ã —Å WB!",
                reply_markup=main_menu()
            )

    except telebot.apihelper.ApiTelegramException as e:
        logger.error(f"Telegram API error: {e}")
        bot.answer_callback_query(call.id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
    except Exception as e:
        logger.error(f"Unexpected error: {e}", exc_info=True)
        bot.answer_callback_query(call.id, text="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞")

@bot.message_handler(commands=['product'])
def product(message):
    parts = message.text.split()
    if len(parts) != 2:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã! –í–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç - /product 2")
        return

    try:
        product_id = int(parts[1])
    except:
        bot.send_message(message.chat.id, "ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        return

    conn = sqlite3.connect(DB_path)
    c = conn.cursor()
    c.execute("SELECT name, image_path FROM product_list WHERE id = ?", (product_id,))
    result = c.fetchone()
    conn.close()


    if result:
        name, image_path = result
        with open(image_path, "rb") as image:
            bot.send_photo(message.chat.id, image)
        bot.send_message(message.chat.id, name)
    else:
        bot.send_message(message.chat.id, "–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ –¥–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    try:
        bot.polling(none_stop=True, interval=2, timeout=60)
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
    finally:
        logger.info("–†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
